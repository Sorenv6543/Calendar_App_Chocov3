
Based on your codebase, I recommend establishing a single source of truth in the following structure:

1. **Pinia stores should be your primary state container**:
   - Expand your existing `userStore.ts` into separate domain-specific stores:
     - `userStore` - User authentication and profile data
     - `houseStore` - House management
     - `eventStore` - Calendar events/booking logic
   
2. **Each store should manage a specific domain**:
   - Move all Firebase interactions inside these stores
   - Eliminate redundant state tracking (like the separate arrays for houses)
   - Components should only read from stores, never maintain copies

3. **For UI state**:
   - Create a dedicated `uiStore` for app-wide UI state like:
     - Modal visibility
     - Selected view options
     - Current filters

4. **For form state**:
   - Use form-specific composables with reactive state
   - Example: `useEventForm` could manage all EventModal state

This architecture would significantly reduce redundancy and create clear ownership of state. Components would become "dumb" presentational layers focused solely on rendering and user interactions, while all business logic and data management would live in the stores.
